# Internal functions
# Stack operations
def dup ( a -> a a )
	copy 0

def over ( a b -> a b a )
	copy 1

def swap ( a b -> b a )
	move 1

def drop ( a -> )
	remove 0

def nip ( a b -> b )
	remove 1

def rotl ( a b c -> b c a )
	move 2

def rotr ( a b c -> c a b ) {
	rotl rotl
}

def tuck ( a b -> b a b ) {
	over over
	remove 3
}


# Two element variants of stack operations
def dup2 ( a b -> a b a b ) {
	over over
}

def over2 ( a b c d -> a b c d a b ) {
	copy 3
	copy 3
}

def swap2 ( a b c d -> c d a b ) {
	move 3
	move 3
}

def drop2 ( a b -> ) {
	drop drop
}

def nip2 ( a b c -> c ) {
	nip nip
}

def rotl2 ( a b c d e f -> c d e f a b ) {
	move 5
	move 5
}

def rotr2 ( a b c d e f -> e f a b c d ) {
	rotl2 rotl2
}

def tuck2 ( a b c d -> c d a b c d ) {
	swap2 over2
}


# External functions
# Arithmetic
global add ( a b -> q )
global sub ( a b -> q )
global mul ( a b -> q )
global div ( a b -> q )
global mod ( a b -> q )

global lsh ( a b -> q )
global rsh ( a b -> q )

# Logical
global and ( a b -> q )
global or ( a b -> q )
global xor ( a b -> q )
global not ( a -> a )

# Bitwise
global band ( a b -> q )
global bor ( a b -> q )
global bxor ( a b -> q )
global bnot ( a -> a )

# Comparisons
global eq ( a b -> q )
global lt ( a b -> q )
global gt ( a b -> q )
global lte ( a b -> q )
global gte ( a b -> q )

# Misc
global word ( -> a ) # Get word size of current platform


# Aliases
def + ( a b -> q ) add
def - ( a b -> q ) sub
def * ( a b -> q ) mul
def / ( a b -> q ) div
def % ( a b -> q ) mod

def << ( a b -> q ) lsh
def >> ( a b -> q ) rsh

def && ( a b -> q ) and
def || ( a b -> q ) or
def ^^ ( a b -> q ) xor
def !  ( a -> a )   not

def & ( a b -> q ) band
def | ( a b -> q ) bor
def ^ ( a b -> q ) bxor
def ~ ( a -> a )   bnot

def =  ( a b -> q ) eq
def != ( a b -> q ) { eq not }
def <  ( a b -> q ) lt
def >  ( a b -> q ) gt
def <= ( a b -> q ) lte
def >= ( a b -> q ) gte


# Internal functions
# Misc functions
def inc ( a -> a ) { 1 + }
def dec ( a -> a ) { 1 - }
def ++  ( a -> a ) inc
def --  ( a -> a ) dec

def min ( a b -> q ) {
	if { dup2 > } swap
	drop
}

def max ( a b -> q ) {
	if { dup2 < } swap
	drop
}

def neg ( a -> a ) {
	bnot ++
}

def abs ( a -> a ) {
	dup
	word -- >>
	swap over
	^ -
}

def true  ( -> a ) 1
def false ( -> a ) 0

def true?  ( a -> a ) { false != }
def false? ( a -> a ) { false =  }

def =0?  ( a -> a ) { 0 =  }
def !=0? ( a -> a ) { 0 != }
def >0?  ( a -> a ) { 0 >  }
def <0?  ( a -> a ) { 0 <  }
def >=0? ( a -> a ) { 0 >= }
def <=0? ( a -> a ) { 0 <= }

def +? ( a -> a ) >0?
def -? ( a -> a ) <0?

def pos? ( a -> a ) +?
def neg? ( a -> a ) -?

def even? ( a -> a ) { 2 % =0?  }
def odd?  ( a -> a ) { 2 % 1 = }

def both? ( a b -> q ) {
	true? swap
	true? =
}

def neither? ( a b -> q ) {
	false? swap
	false? =
}

def either? ( a b -> q ) {
	true? swap
	true? or
}


