# Internal functions
# Stack operations
dup ( a -> a a )
	copy 0

over ( a b -> a b a )
	copy 1

swap ( a b -> b a )
	move 1

drop ( a -> )
	remove 0

nip ( a b -> b )
	remove 1

rotl ( a b c -> b c a )
	move 2

rotr ( a b c -> c a b ) {
	rotl rotl
}

tuck ( a b -> b a b ) {
	over over
	remove 3
}


# Two element variants of stack operations
pair-dup ( a b -> a b a b ) {
	over over
}

pair-over ( a b c d -> a b c d a b ) {
	copy 3
	copy 3
}

pair-swap ( a b c d -> c d a b ) {
	move 3
	move 3
}

pair-drop ( a b -> ) {
	drop drop
}

pair-nip ( a b c -> c ) {
	nip nip
}

pair-rotl ( a b c d e f -> c d e f a b ) {
	move 5
	move 5
}

pair-rotr ( a b c d e f -> e f a b c d ) {
	pair-rotl pair-rotl
}

pair-tuck ( a b c d -> c d a b c d ) {
	pair-swap pair-over
}


# External functions
# Arithmetic
extern add ( a b -> q )
extern sub ( a b -> q )
extern mul ( a b -> q )
extern div ( a b -> q )
extern mod ( a b -> q )

extern lsh ( a b -> q )
extern rsh ( a b -> q )

# Logical
extern and ( a b -> q )
extern or ( a b -> q )
extern xor ( a b -> q )
extern not ( a -> a )

# Bitwise
extern band ( a b -> q )
extern bor ( a b -> q )
extern bxor ( a b -> q )
extern bnot ( a -> a )

# Comparisons
extern eq ( a b -> q )
not-eq ( a b -> q ) { eq not }
extern lt ( a b -> q )
extern gt ( a b -> q )
extern lte ( a b -> q )
extern gte ( a b -> q )

# Misc
extern word ( -> a ) # Get word size of current platform


# Aliases
+ ( a b -> q ) add
- ( a b -> q ) sub
* ( a b -> q ) mul
/ ( a b -> q ) div
% ( a b -> q ) mod

<< ( a b -> q ) lsh
>> ( a b -> q ) rsh

&& ( a b -> q ) and
|| ( a b -> q ) or
^^ ( a b -> q ) xor
!  ( a -> a )   not

& ( a b -> q ) band
| ( a b -> q ) bor
^ ( a b -> q ) bxor
~ ( a -> a )   bnot

=  ( a b -> q ) eq
!= ( a b -> q ) not-eq
<  ( a b -> q ) lt
>  ( a b -> q ) gt
<= ( a b -> q ) lte
>= ( a b -> q ) gte

# Two element variants
pair-add ( a b c d -> q1 q2 ) { + rotr + swap }
pair-sub ( a b c d -> q1 q2 ) { - rotr - swap }
pair-mul ( a b c d -> q1 q2 ) { * rotr * swap }
pair-div ( a b c d -> q1 q2 ) { / rotr / swap }
pair-mod ( a b c d -> q1 q2 ) { % rotr % swap }

pair-lsh ( a b c d -> q1 q2 ) { << rotr << swap }
pair-rsh ( a b c d -> q1 q2 ) { >> rotr >> swap }

pair-and ( a b c d -> q1 q2 ) { && rotr && swap }
pair-or  ( a b c d -> q1 q2 ) { || rotr || swap }
pair-xor ( a b c d -> q1 q2 ) { ^^ rotr ^^ swap }
pair-not ( a b -> q1 q2 )     { !  swap !  swap }

pair-eq     ( a b c d -> q1 q2 ) { eq     rotr eq     swap }
pair-not-eq ( a b c d -> q1 q2 ) { not-eq rotr not-eq swap }
pair-lt     ( a b c d -> q1 q2 ) { lt     rotr lt     swap }
pair-gt     ( a b c d -> q1 q2 ) { gt     rotr gt     swap }
pair-lte    ( a b c d -> q1 q2 ) { lte    rotr lte    swap }
pair-gte    ( a b c d -> q1 q2 ) { gte    rotr gte    swap }


# Internal functions
# Misc functions
inc ( a -> a ) { 1 + }
dec ( a -> a ) { 1 - }
++  ( a -> a ) inc
--  ( a -> a ) dec

min ( a b -> q ) {
	if { pair-dup > } swap
	drop
}

max ( a b -> q ) {
	if { pair-dup < } swap
	drop
}

neg ( a -> a ) {
	bnot ++
}

abs ( a -> a ) {
	dup
	word -- >>
	swap over
	^ -
}

true  ( -> a ) 1
false ( -> a ) 0

true?  ( a -> a ) { false != }
false? ( a -> a ) { false =  }

=0?  ( a -> a ) { 0 =  }
!=0? ( a -> a ) { 0 != }
>0?  ( a -> a ) { 0 >  }
<0?  ( a -> a ) { 0 <  }
>=0? ( a -> a ) { 0 >= }
<=0? ( a -> a ) { 0 <= }

+? ( a -> a ) >0?
-? ( a -> a ) <0?

pos? ( a -> a ) +?
neg? ( a -> a ) -?

even? ( a -> a ) { 2 % =0?  }
odd?  ( a -> a ) { 2 % 1 = }

both? ( a b -> q ) {
	true? swap
	true? =
}

neither? ( a b -> q ) {
	false? swap
	false? =
}

either? ( a b -> q ) {
	true? swap
	true? or
}


