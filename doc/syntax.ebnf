// TOKENS
int ::= ? [0-9_]+ ? | ? 0x[0-9A-z_]+ ? | ? 0b[0-1_]+ ?
char ::= "'" ? . ?
string ::= '"' ? .+ ? '"'
literal ::= <int> | <char> | <string>
identifier ::= ? \S+ ?
comment ::= ? #.+$ ?


// INTERMEDIATE RULES
program ::= <statement>+

statement ::= <fn> | <decl>
expression ::= (
		<literal> |
		<while> |
		<block> |
		<if> |
		<intrinsic> |
		<identifier>
	)


// MISC
effect ::= '(' <identifier>* '->' <identifier>* ')'  // ( x y -> z )


// STATEMENTS
// neg ( x -> x ) { { 1 2 - } * }
fn ::= <identifier> [ <effect> ] <expression>

// decl foo ( a b -> q )
decl ::= ( 'decl' | 'extern' ) <identifier> <effect>


// EXPRESSIONS
// if { dup =1 } { "true" println } else { "false" println }
if ::= 'if' <expression> <expression> [ 'else' <expression> ]

// while { dup 10 < }
//   ++
while ::= 'while' <expression> <expression>

// { foo bar }
block ::= '{' <expression>+ '}'


// INSTRINSICS
ops ::= (
		'add' | 'sub' | 'mul' | 'div' | 'mod' | 'lsh' | 'rsh' |
		'lt' | 'gt' | 'eq' |
		'and' | 'or' | 'not' | 'xor' |
		'band' | 'bor' | 'bnot' | 'bxor' |
		'word'
	)

intrinsic ::= <ops> | <arg_intrinsic>
arg_intrinsic ::= ( 'copy' | 'move' | 'remove' ) <literal>

