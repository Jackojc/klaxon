// TOKENS
comment ::= ? #.+$ ?
identifier ::= ? [A-z_][A-z0-9_]* ?
int ::= ? [0-9_]+ ?


// GRAMMAR
effect ::= '(' <int> '->' <int> ')'

decl ::= ( 'intern' | 'extern' ) <identifier> <effect>
block ::= 'block' <int> <instruction>* 'end'
fn ::= 'fn' <identifier> <block>+ 'ret'

instruction ::=
	( 'let' <int> <int> ) |  // Set a register to a literal value
	( 'copy' <int> <int> ) |  // Copy a register to another register

	( 'push' <int> ) |  // Push value in register to stack
	( 'pop' <int> ) |   // Pop value from stack to register

	( 'call' <identifier> ) |
	( 'jump' <int> ) |
	( 'branch' <int> <int> )

program ::= ( <fn> | <block> | <decl> )+
